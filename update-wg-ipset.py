#!/usr/bin/env python3
import sys
import re
from netaddr import IPSet, IPNetwork, iprange_to_cidrs
import requests
import subprocess
import os
import shutil

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
WG_CONFIG_FILE = '/etc/wireguard/wg1.conf'        # –ø—É—Ç—å –∫–æ–Ω—Ñ–∏–≥—É WireGuard
WG_INTERFACE = 'wg1'
ETH_INTERFACE = 'ens3'
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
EXCLUDE_FILE = os.path.join(SCRIPT_DIR, 'exclude.txt') # –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
INCLUDE_FILE = os.path.join(SCRIPT_DIR, 'include.txt') 
COUNTRY_CODE = 'RU'                # —Å—Ç—Ä–∞–Ω–∞ –¥–ª—è RIPE
CUTOFF_PREFIX = 10                 # –º–∞—Å–∫–∞ –¥–ª—è "–∑–∞–≥—Ä—É–±–ª–µ–Ω–∏—è" –º–µ–ª–∫–∏—Ö —Å–µ—Ç–µ–π
IPSET_NAME = 'wg_allowed_ips'      # –∏–º—è –¥–ª—è ipset

def execute_command(cmd, description="", shell=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(cmd, shell=shell, check=True, capture_output=True, text=True)
        if description:
            print(f"‚úÖ {description}", file=sys.stderr)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã '{cmd}': {e}", file=sys.stderr)
        print(f"stderr: {e.stderr}", file=sys.stderr)
        return None

def read_cidrs_from_file(filepath):
    """–ß–∏—Ç–∞–µ—Ç CIDR –∏–∑ —Ñ–∞–π–ª–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)."""
    cidrs = []
    if not os.path.exists(filepath):
        print(f"‚ö†Ô∏è –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.", file=sys.stderr)
        return cidrs
    try:
        with open(filepath, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    cidrs.append(line)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filepath}: {e}", file=sys.stderr)
    return cidrs

def normalize_ripe_ipv4_list(ipv4_list):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ RIPE:
    - —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "192.0.2.0/24" ‚Üí –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å,
    - —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "192.0.2.0-192.0.2.255" ‚Üí –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ CIDR.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ CIDR –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫.
    """
    normalized = []
    for item in ipv4_list:
        item = item.strip()
        if '-' in item:
            try:
                start_ip, end_ip = item.split('-')
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤ CIDR
                cidrs = iprange_to_cidrs(start_ip, end_ip)
                normalized.extend([str(cidr) for cidr in cidrs])
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω: {item} ({e})", file=sys.stderr)
        else:
            # –£–∂–µ CIDR –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω—ã–π IP (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.2.3.4" ‚Üí —Å—Ç–∞–Ω–µ—Ç /32)
            try:
                # netaddr –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç "1.2.3.4" –∫–∞–∫ /32
                net = IPNetwork(item)
                normalized.append(str(net))
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–µ—Ç—å: {item} ({e})", file=sys.stderr)
    return normalized

def get_ripe_country_ipv4(country_code='RU'):
    url = f'https://stat.ripe.net/data/country-resource-list/data.json?resource={country_code}'
    try:
        print(f"üì• –ó–∞–ø—Ä–∞—à–∏–≤–∞—é IPv4 —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code} —É RIPE...", file=sys.stderr)
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        raw_ipv4_list = data['data']['resources']['ipv4']
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(raw_ipv4_list)} –∑–∞–ø–∏—Å–µ–π –æ—Ç RIPE (–¥–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏).", file=sys.stderr)
        normalized = normalize_ripe_ipv4_list(raw_ipv4_list)
        print(f"üîß –ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ ‚Üí CIDR: {len(normalized)} –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤.", file=sys.stderr)
        return normalized
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç RIPE: {e}", file=sys.stderr)
        sys.exit(1)

def expand_small_networks(cidr_list, cutoff_prefix=24):
    """–†–∞—Å—à–∏—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –º–µ–ª–∫–∏–µ —Å–µ—Ç–∏ (prefixlen > cutoff) –¥–æ cutoff_prefix."""
    result = []
    for item in cidr_list:
        try:
            net = IPNetwork(item)
            if net.prefixlen > cutoff_prefix:
                net.prefixlen = cutoff_prefix
                net = net.cidr
            result.append(str(net))
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–µ—Ç—å: {item} ({e})", file=sys.stderr)
    return result

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç"""
    deps = ['ipset', 'iptables', 'wg']
    missing = []
    
    for dep in deps:
        if not shutil.which(dep):
            missing.append(dep)
    
    if missing:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing)}", file=sys.stderr)
        print("–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: ipset, iptables, wireguard-tools", file=sys.stderr)
        sys.exit(1)
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç", file=sys.stderr)

def create_ipset(ipset_name):
    """–°–æ–∑–¥–∞–µ—Ç ipset –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ ipset
    result = execute_command(f"ipset list {ipset_name}", f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è ipset {ipset_name}")
    if result is None:
        # –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º
        execute_command(f"ipset create {ipset_name} hash:net", f"–°–æ–∑–¥–∞–Ω–∏–µ ipset {ipset_name}")
    else:
        print(f"‚ÑπÔ∏è ipset {ipset_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", file=sys.stderr)

def flush_ipset(ipset_name):
    """–û—á–∏—â–∞–µ—Ç ipset"""
    execute_command(f"ipset flush {ipset_name}", f"–û—á–∏—Å—Ç–∫–∞ ipset {ipset_name}")

def add_to_ipset(ipset_name, cidr):
    """–î–æ–±–∞–≤–ª—è–µ—Ç CIDR –≤ ipset"""
    execute_command(f"ipset add {ipset_name} {cidr}", f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {cidr} –≤ ipset")

def setup_iptables_rules(wg_interface, ipset_name):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç iptables –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞"""
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    cleanup_iptables_rules(wg_interface, ipset_name)
    
    # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è OUTPUT —Ü–µ–ø–æ—á–∫–∏ (–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫)
    execute_command(f"iptables -A OUTPUT -m set --match-set {ipset_name} dst -o {wg_interface} -j ACCEPT", 
                   f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ OUTPUT –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è {wg_interface}")
    execute_command(f"iptables -A OUTPUT -m set --match-set {ipset_name} dst -j RETURN", 
                   f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ OUTPUT RETURN –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è {wg_interface}")
    
    # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è FORWARD —Ü–µ–ø–æ—á–∫–∏ (–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞)
    execute_command(f"iptables -A FORWARD -i {ETH_INTERFACE} -o {wg_interface} -m set --match-set {ipset_name} dst -j ACCEPT", 
                   f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ FORWARD –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è {wg_interface}")
    execute_command(f"iptables -A FORWARD -i {wg_interface} -o {ETH_INTERFACE} -j ACCEPT", 
                   "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ FORWARD –ø—Ä–∞–≤–∏–ª–∞")

def cleanup_iptables_rules(wg_interface, ipset_name):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ iptables –ø—Ä–∞–≤–∏–ª–∞"""
    # –£–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è OUTPUT
    try:
        execute_command(f"iptables -D OUTPUT -m set --match-set {ipset_name} dst -o {wg_interface} -j ACCEPT", 
                       f"–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ OUTPUT –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è {wg_interface}")
    except:
        pass
    try:
        execute_command(f"iptables -D OUTPUT -m set --match-set {ipset_name} dst -j RETURN", 
                       "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ OUTPUT RETURN –ø—Ä–∞–≤–∏–ª–∞")
    except:
        pass
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è FORWARD
    try:
        execute_command(f"iptables -D FORWARD -i {ETH_INTERFACE} -o {wg_interface} -m set --match-set {ipset_name} dst -j ACCEPT", 
                       "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ FORWARD –ø—Ä–∞–≤–∏–ª–∞")
    except:
        pass
    try:
        execute_command(f"iptables -D FORWARD -i {wg_interface} -o {ETH_INTERFACE} -j ACCEPT", 
                       "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ FORWARD –ø—Ä–∞–≤–∏–ª–∞")
    except:
        pass

def update_wireguard_config_for_ipset(config_path):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥ WireGuard –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ipset/iptables —Å—Ö–µ–º–æ–π"""
    try:
        with open(config_path, 'r') as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º AllowedIPs —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É AllowedIPs
        lines = content.split('\n')
        new_lines = []
        for line in lines:
            if not line.strip().startswith('AllowedIPs'):
                new_lines.append(line)
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
                new_lines.append(f"# {line}  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å ipset/iptables")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É AllowedIPs —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º
        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Å–µ–∫—Ü–∏–∏ [Peer]
        modified_content = '\n'.join(new_lines)
        modified_content = re.sub(
            r'(\[Peer\]\s*\n)',
            r'\1AllowedIPs = 0.0.0.0/32\n',  # –ü—É—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç, —Ç–∞–∫ –∫–∞–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ iptables
            modified_content,
            count=1
        )
        
        with open(config_path, 'w') as f:
            f.write(modified_content)
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard {config_path} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å ipset/iptables", file=sys.stderr)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard: {e}", file=sys.stderr)
        sys.exit(1)

def save_persistent_config(ipset_name):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –ø–∞–∫–µ—Ç—ã –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞
        if not shutil.which("iptables-save") or not shutil.which("ipset"):
            print("‚ö†Ô∏è –£—Ç–∏–ª–∏—Ç—ã iptables-save –∏–ª–∏ ipset –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ iptables-persistent –∏ ipset.", file=sys.stderr)
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        os.makedirs("/etc/iptables", exist_ok=True)
        os.makedirs("/etc", exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º iptables –ø—Ä–∞–≤–∏–ª–∞
        execute_command("iptables-save > /etc/iptables/rules.v4", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª iptables")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ipset
        execute_command(f"ipset save {ipset_name} > /etc/ipset.conf", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ipset")
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏", file=sys.stderr)
        print("‚ÑπÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç—ã iptables-persistent –∏ ipset-persistent –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", file=sys.stderr)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}", file=sys.stderr)
        print("–ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞", file=sys.stderr)

def main():
    print("üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è WireGuard —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ipset –∏ iptables", file=sys.stderr)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    check_dependencies()
    
    # 1. –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è ‚Äî –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏–π
    local_excludes = read_cidrs_from_file(EXCLUDE_FILE)
    print(f"üìÅ –õ–æ–∫–∞–ª—å–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π): {len(local_excludes)}", file=sys.stderr)

    # 2. RIPE-–∏—Å–∫–ª—é—á–µ–Ω–∏—è ‚Äî —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–µ–ª–∫–∏—Ö —Å–µ—Ç–µ–π
    ripe_raw = get_ripe_country_ipv4(COUNTRY_CODE)
    ripe_processed = expand_small_networks(ripe_raw, CUTOFF_PREFIX)
    print(f"üåç RIPE-—Å–µ—Ç–µ–π –ø–æ—Å–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–æ /{CUTOFF_PREFIX}: {len(ripe_processed)}", file=sys.stderr)

    # 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º –í–°–ï –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    all_excludes = local_excludes + ripe_processed

    # 4. –°–æ–∑–¥–∞—ë–º IPSet (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è)
    try:
        excluded_set = IPSet(all_excludes)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ IPSet: {e}", file=sys.stderr)
        sys.exit(1)

    print(f"üß± –í—Å–µ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {len(excluded_set.iter_cidrs())} CIDR", file=sys.stderr)

    # 5. –í—ã—á–∏—Ç–∞–µ–º –∏–∑ –ø–æ–ª–Ω–æ–≥–æ IPv4
    full_ipv4 = IPSet(['0.0.0/0'])
    allowed_ipv4 = full_ipv4 - excluded_set

    # 6. –î–û–ë–ê–í–õ–Ø–ï–ú include.txt (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—à–µ!)
    include_cidrs = read_cidrs_from_file(INCLUDE_FILE)
    if include_cidrs:
        include_set = IPSet(include_cidrs)
        allowed_ipv4 = allowed_ipv4 | include_set  # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
        print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ include.txt: {len(include_set.iter_cidrs())} CIDR", file=sys.stderr)

    # 7. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
    allowed_cidrs = [str(cidr) for cidr in allowed_ipv4.iter_cidrs()]

    # 8. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º ipset
    create_ipset(IPSET_NAME)
    flush_ipset(IPSET_NAME)
    
    print(f"üåê –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(allowed_cidrs)} CIDR –≤ ipset...", file=sys.stderr)
    for i, cidr in enumerate(allowed_cidrs):
        add_to_ipset(IPSET_NAME, cidr)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π
        if (i + 1) % 1000 == 0:
            print(f" –ü—Ä–æ—Ü–µ—Å—Å: {i + 1}/{len(allowed_cidrs)}", file=sys.stderr)

    # 9. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º iptables –ø—Ä–∞–≤–∏–ª–∞
    setup_iptables_rules(WG_INTERFACE, IPSET_NAME)

    # 10. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WireGuard
    update_wireguard_config_for_ipset(WG_CONFIG_FILE)

    # 11. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º WireGuard –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    try:
        subprocess.run(['systemctl', 'restart', f'wg-quick@{WG_INTERFACE}'], check=True)
        print(f"üîÑ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å {WG_INTERFACE} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.", file=sys.stderr)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {WG_INTERFACE}: {e}", file=sys.stderr)
        sys.exit(1)

    # 12. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    save_persistent_config(IPSET_NAME)

    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ipset {IPSET_NAME} —Å {len(allowed_cidrs)} CIDR.", file=sys.stderr)
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(local_excludes)} –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π, {len(ripe_processed)} RIPE –∏—Å–∫–ª—é—á–µ–Ω–∏–π, {len(include_cidrs) if include_cidrs else 0} –≤–∫–ª—é—á–µ–Ω–∏–π", file=sys.stderr)

if __name__ == '__main__':
    main()