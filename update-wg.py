#!/usr/bin/env python3
import sys
import re
from netaddr import IPSet, IPNetwork, iprange_to_cidrs
import requests

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
WG_CONFIG_FILE = 'wg1.conf'        # –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É WireGuard
EXCLUDE_FILE = 'exclude.txt'       # –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
COUNTRY_CODE = 'RU'                # —Å—Ç—Ä–∞–Ω–∞ –¥–ª—è RIPE
CUTOFF_PREFIX = 16                 # –º–∞—Å–∫–∞ –¥–ª—è "–∑–∞–≥—Ä—É–±–ª–µ–Ω–∏—è" –º–µ–ª–∫–∏—Ö —Å–µ—Ç–µ–π

def read_cidrs_from_file(filepath):
    cidrs = []
    try:
        with open(filepath, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    cidrs.append(line)
    except FileNotFoundError:
        print(f"‚ö†Ô∏è –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π.", file=sys.stderr)
    return cidrs

def normalize_ripe_ipv4_list(ipv4_list):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ RIPE:
    - —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "192.0.2.0/24" ‚Üí –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å,
    - —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "192.0.2.0-192.0.2.255" ‚Üí –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ CIDR.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ CIDR –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫.
    """
    normalized = []
    for item in ipv4_list:
        item = item.strip()
        if '-' in item:
            try:
                start_ip, end_ip = item.split('-')
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤ CIDR
                cidrs = iprange_to_cidrs(start_ip, end_ip)
                normalized.extend([str(cidr) for cidr in cidrs])
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω: {item} ({e})", file=sys.stderr)
        else:
            # –£–∂–µ CIDR –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω—ã–π IP (–Ω–∞–ø—Ä–∏–º–µ—Ä, "192.0.2.1" ‚Üí —Å—Ç–∞–Ω–µ—Ç /32)
            try:
                # netaddr –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç "1.2.3.4" –∫–∞–∫ /32
                net = IPNetwork(item)
                normalized.append(str(net))
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–µ—Ç—å: {item} ({e})", file=sys.stderr)
    return normalized

def get_ripe_country_ipv4(country_code='RU'):
    url = f'https://stat.ripe.net/data/country-resource-list/data.json?resource={country_code}'
    try:
        print(f"üì• –ó–∞–ø—Ä–∞—à–∏–≤–∞—é IPv4 —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code} —É RIPE...", file=sys.stderr)
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        raw_ipv4_list = data['data']['resources']['ipv4']
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(raw_ipv4_list)} –∑–∞–ø–∏—Å–µ–π –æ—Ç RIPE (–¥–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏).", file=sys.stderr)
        normalized = normalize_ripe_ipv4_list(raw_ipv4_list)
        print(f"üîß –ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ ‚Üí CIDR: {len(normalized)} –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤.", file=sys.stderr)
        return normalized
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç RIPE: {e}", file=sys.stderr)
        sys.exit(1)

def expand_small_networks(cidr_list, cutoff_prefix=24):
    """–†–∞—Å—à–∏—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –º–µ–ª–∫–∏–µ —Å–µ—Ç–∏ (prefixlen > cutoff) –¥–æ cutoff_prefix."""
    result = []
    for item in cidr_list:
        try:
            net = IPNetwork(item)
            if net.prefixlen > cutoff_prefix:
                net.prefixlen = cutoff_prefix
                net = net.cidr
            result.append(str(net))
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–µ—Ç—å: {item} ({e})", file=sys.stderr)
    return result

def read_wg_config(filepath):
    try:
        with open(filepath, 'r') as f:
            return f.read()
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω.", file=sys.stderr)
        sys.exit(1)

def write_wg_config(filepath, content):
    with open(filepath, 'w') as f:
        f.write(content)
    print(f"‚úÖ –§–∞–π–ª {filepath} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.", file=sys.stderr)

def main():
    # 1. –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è ‚Äî –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏–π
    local_excludes = read_cidrs_from_file(EXCLUDE_FILE)
    print(f"üìÅ –õ–æ–∫–∞–ª—å–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π): {len(local_excludes)}", file=sys.stderr)

    # 2. RIPE-–∏—Å–∫–ª—é—á–µ–Ω–∏—è ‚Äî —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–µ–ª–∫–∏—Ö —Å–µ—Ç–µ–π
    ripe_raw = get_ripe_country_ipv4(COUNTRY_CODE)
    ripe_processed = expand_small_networks(ripe_raw, CUTOFF_PREFIX)
    print(f"üåç RIPE-—Å–µ—Ç–µ–π –ø–æ—Å–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–æ /{CUTOFF_PREFIX}: {len(ripe_processed)}", file=sys.stderr)

    # 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º –í–°–ï –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    all_excludes = local_excludes + ripe_processed

    # 4. –°–æ–∑–¥–∞—ë–º IPSet (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è)
    try:
        excluded_set = IPSet(all_excludes)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ IPSet: {e}", file=sys.stderr)
        sys.exit(1)

    print(f"üß± –í—Å–µ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {len(excluded_set.iter_cidrs())} CIDR", file=sys.stderr)

    # 5. –í—ã—á–∏—Ç–∞–µ–º –∏–∑ –ø–æ–ª–Ω–æ–≥–æ IPv4
    full_ipv4 = IPSet(['0.0.0.0/0'])
    allowed_ipv4 = full_ipv4 - excluded_set
    allowed_cidrs = [str(cidr) for cidr in allowed_ipv4.iter_cidrs()]

    # 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É AllowedIPs
    allowed_ips_line = 'AllowedIPs = ' + ', '.join(allowed_cidrs)

    # 6. –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    config_content = read_wg_config(WG_CONFIG_FILE)

    # 7. –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É AllowedIPs
    # –ò—â–µ–º –ª—é–±—É—é —Å—Ç—Ä–æ–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å "AllowedIPs" (—Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏)
    pattern = r'^(\s*AllowedIPs\s*=\s*).*$'
    if re.search(pattern, config_content, re.MULTILINE):
        new_content = re.sub(pattern, allowed_ips_line, config_content, flags=re.MULTILINE)
    else:
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –¥–æ–±–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ [Peer]
        # (–ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞)
        new_content = config_content.rstrip() + '\n' + allowed_ips_line + '\n'
        print("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ AllowedIPs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞.", file=sys.stderr)

    # 8. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    write_wg_config(WG_CONFIG_FILE, new_content)

    # 9. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª
    print(f"üìä –í AllowedIPs –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(allowed_cidrs)} –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤.", file=sys.stderr)

if __name__ == '__main__':
    main()